type Address {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  country: String
  street_address_1: String
  street_address_2: String
  city: String
  state: String
  postal_code: String
  owner: UsersPermissionsUser
  used_time: DateTime
}

input AddressInput {
  country: String
  street_address_1: String
  street_address_2: String
  city: String
  state: String
  postal_code: String
  owner: ID
  used_time: DateTime
}

type Businessmanager {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  position: String!
  phone_number: String!
  email: String
  tax_receipt: Boolean!
  businessprofile: Businessprofile
}

input BusinessmanagerInput {
  name: String!
  position: String!
  phone_number: String!
  email: String
  tax_receipt: Boolean!
  businessprofile: ID
}

type Businessprofile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  registration_number: String!
  type: String
  address: String
  sales_report_number: String!
  representative_number: String
  phone_number: String!
  email: String!
  user: UsersPermissionsUser
  businessmanagers(sort: String, limit: Int, start: Int, where: JSON): [Businessmanager]
}

input BusinessprofileInput {
  name: String!
  registration_number: String!
  type: String
  address: String
  sales_report_number: String!
  representative_number: String
  phone_number: String!
  email: String!
  businessmanagers: [ID]
  user: ID
}

type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  parent: Category
  child: Category
  code: String!
  kr_name: String!
  vn_name: String
  th_name: String
  ph_name: String
  en_name: String!
  goods(sort: String, limit: Int, start: Int, where: JSON): [Goods]
}

input CategoryInput {
  parent: ID
  child: ID
  code: String!
  kr_name: String!
  vn_name: String
  th_name: String
  ph_name: String
  en_name: String!
  goods: [ID]
}

input createAddressInput {
  data: AddressInput
}

type createAddressPayload {
  address: Address
}

input createBusinessmanagerInput {
  data: BusinessmanagerInput
}

type createBusinessmanagerPayload {
  businessmanager: Businessmanager
}

input createBusinessprofileInput {
  data: BusinessprofileInput
}

type createBusinessprofilePayload {
  businessprofile: Businessprofile
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input createFollowInput {
  data: FollowInput
}

type createFollowPayload {
  follow: Follow
}

input createGoodsInput {
  data: GoodsInput
}

type createGoodsPayload {
  good: Goods
}

input createOptionInput {
  data: OptionInput
}

type createOptionPayload {
  option: Option
}

input createQuestionInput {
  data: QuestionInput
}

type createQuestionPayload {
  question: Question
}

input createReviewInput {
  data: ReviewInput
}

type createReviewPayload {
  review: Review
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteAddressInput {
  where: InputID
}

type deleteAddressPayload {
  address: Address
}

input deleteBusinessmanagerInput {
  where: InputID
}

type deleteBusinessmanagerPayload {
  businessmanager: Businessmanager
}

input deleteBusinessprofileInput {
  where: InputID
}

type deleteBusinessprofilePayload {
  businessprofile: Businessprofile
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

input deleteFollowInput {
  where: InputID
}

type deleteFollowPayload {
  follow: Follow
}

input deleteGoodsInput {
  where: InputID
}

type deleteGoodsPayload {
  good: Goods
}

input deleteOptionInput {
  where: InputID
}

type deleteOptionPayload {
  option: Option
}

input deleteQuestionInput {
  where: InputID
}

type deleteQuestionPayload {
  question: Question
}

input deleteReviewInput {
  where: InputID
}

type deleteReviewPayload {
  review: Review
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAddressInput {
  country: String
  street_address_1: String
  street_address_2: String
  city: String
  state: String
  postal_code: String
  owner: ID
  used_time: DateTime
}

input editBusinessmanagerInput {
  name: String
  position: String
  phone_number: String
  email: String
  tax_receipt: Boolean
  businessprofile: ID
}

input editBusinessprofileInput {
  name: String
  registration_number: String
  type: String
  address: String
  sales_report_number: String
  representative_number: String
  phone_number: String
  email: String
  businessmanagers: [ID]
  user: ID
}

input editCategoryInput {
  parent: ID
  child: ID
  code: String
  kr_name: String
  vn_name: String
  th_name: String
  ph_name: String
  en_name: String
  goods: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editFollowInput {
  follower: ID
  followee: ID
}

input editGoodsInput {
  owner: ID
  category: ID
  kr_name: String
  vn_name: String
  ph_name: String
  th_name: String
  en_name: String
  kr_description: String
  ph_description: String
  th_description: String
  en_description: String
  vn_description: String
  kr_short_description: String
  vn_short_description: String
  th_short_description: String
  en_short_description: String
  ph_short_description: String
  thumbnail: [ID]
  detail_image: [ID]
  memo: String
  vn_hashtag: String
  th_hashtag: String
  ph_hashtag: String
  en_hashtag: String
  kr_hashtag: String
  options: [ID]
  option: JSON
  tax_type: Int
}

input editOptionInput {
  good: ID
  kr_price: Int
  active: Boolean
  quantity: Int
  sold_quantity: Int
  quantity_management: Boolean
  memo: String
  th_price: Int
  ph_price: Int
  en_price: Int
  vn_price: Int
}

input editQuestionInput {
  owner: ID
  content: String
  image: [ID]
}

input editReviewInput {
  content: String
  owner: ID
  image: [ID]
  rate: Int
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  goods: [ID]
  businessprofile: ID
  following_follows: [ID]
  follows: [ID]
  reviews: [ID]
  questions: [ID]
  addresses: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Follow {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  follower: UsersPermissionsUser
  followee: UsersPermissionsUser
}

input FollowInput {
  follower: ID
  followee: ID
}

type Goods {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  owner: UsersPermissionsUser
  category: Category
  kr_name: String!
  vn_name: String
  ph_name: String
  th_name: String
  en_name: String!
  kr_description: String!
  ph_description: String
  th_description: String
  en_description: String!
  vn_description: String
  kr_short_description: String
  vn_short_description: String
  th_short_description: String
  en_short_description: String
  ph_short_description: String
  memo: String
  vn_hashtag: String
  th_hashtag: String
  ph_hashtag: String
  en_hashtag: String
  kr_hashtag: String
  option: JSON
  tax_type: Int
  thumbnail(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  detail_image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  options(sort: String, limit: Int, start: Int, where: JSON): [Option]
}

input GoodsInput {
  owner: ID
  category: ID
  kr_name: String!
  vn_name: String
  ph_name: String
  th_name: String
  en_name: String!
  kr_description: String!
  ph_description: String
  th_description: String
  en_description: String!
  vn_description: String
  kr_short_description: String
  vn_short_description: String
  th_short_description: String
  en_short_description: String
  ph_short_description: String
  thumbnail: [ID]
  detail_image: [ID]
  memo: String
  vn_hashtag: String
  th_hashtag: String
  ph_hashtag: String
  en_hashtag: String
  kr_hashtag: String
  options: [ID]
  option: JSON
  tax_type: Int
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Address | createAddressPayload | updateAddressPayload | deleteAddressPayload | Businessmanager | createBusinessmanagerPayload | updateBusinessmanagerPayload | deleteBusinessmanagerPayload | Businessprofile | createBusinessprofilePayload | updateBusinessprofilePayload | deleteBusinessprofilePayload | Category | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Follow | createFollowPayload | updateFollowPayload | deleteFollowPayload | Goods | createGoodsPayload | updateGoodsPayload | deleteGoodsPayload | Option | createOptionPayload | updateOptionPayload | deleteOptionPayload | Question | createQuestionPayload | updateQuestionPayload | deleteQuestionPayload | Review | createReviewPayload | updateReviewPayload | deleteReviewPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createAddress(input: createAddressInput): createAddressPayload
  updateAddress(input: updateAddressInput): updateAddressPayload
  deleteAddress(input: deleteAddressInput): deleteAddressPayload
  createBusinessmanager(input: createBusinessmanagerInput): createBusinessmanagerPayload
  updateBusinessmanager(input: updateBusinessmanagerInput): updateBusinessmanagerPayload
  deleteBusinessmanager(input: deleteBusinessmanagerInput): deleteBusinessmanagerPayload
  createBusinessprofile(input: createBusinessprofileInput): createBusinessprofilePayload
  updateBusinessprofile(input: updateBusinessprofileInput): updateBusinessprofilePayload
  deleteBusinessprofile(input: deleteBusinessprofileInput): deleteBusinessprofilePayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createFollow(input: createFollowInput): createFollowPayload
  updateFollow(input: updateFollowInput): updateFollowPayload
  deleteFollow(input: deleteFollowInput): deleteFollowPayload
  createGoods(input: createGoodsInput): createGoodsPayload
  updateGoods(input: updateGoodsInput): updateGoodsPayload
  deleteGoods(input: deleteGoodsInput): deleteGoodsPayload
  createOption(input: createOptionInput): createOptionPayload
  updateOption(input: updateOptionInput): updateOptionPayload
  deleteOption(input: deleteOptionInput): deleteOptionPayload
  createQuestion(input: createQuestionInput): createQuestionPayload
  updateQuestion(input: updateQuestionInput): updateQuestionPayload
  deleteQuestion(input: deleteQuestionInput): deleteQuestionPayload
  createReview(input: createReviewInput): createReviewPayload
  updateReview(input: updateReviewInput): updateReviewPayload
  deleteReview(input: deleteReviewInput): deleteReviewPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Option {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  good: Goods
  kr_price: Int!
  active: Boolean!
  quantity: Int!
  sold_quantity: Int!
  quantity_management: Boolean!
  memo: String
  th_price: Int
  ph_price: Int
  en_price: Int!
  vn_price: Int
}

input OptionInput {
  good: ID
  kr_price: Int!
  active: Boolean!
  quantity: Int!
  sold_quantity: Int!
  quantity_management: Boolean!
  memo: String
  th_price: Int
  ph_price: Int
  en_price: Int!
  vn_price: Int
}

type Query {
  address(id: ID!): Address
  addresses(sort: String, limit: Int, start: Int, where: JSON): [Address]
  businessmanager(id: ID!): Businessmanager
  businessmanagers(sort: String, limit: Int, start: Int, where: JSON): [Businessmanager]
  businessprofile(id: ID!): Businessprofile
  businessprofiles(sort: String, limit: Int, start: Int, where: JSON): [Businessprofile]
  category(id: ID!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  follow(id: ID!): Follow
  follows(sort: String, limit: Int, start: Int, where: JSON): [Follow]
  good(id: ID!): Goods
  goods(sort: String, limit: Int, start: Int, where: JSON): [Goods]
  option(id: ID!): Option
  options(sort: String, limit: Int, start: Int, where: JSON): [Option]
  question(id: ID!): Question
  questions(sort: String, limit: Int, start: Int, where: JSON): [Question]
  review(id: ID!): Review
  reviews(sort: String, limit: Int, start: Int, where: JSON): [Review]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

type Question {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  owner: UsersPermissionsUser
  content: String
  image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input QuestionInput {
  owner: ID
  content: String
  image: [ID]
}

type Review {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  content: String!
  owner: UsersPermissionsUser
  rate: Int!
  image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ReviewInput {
  content: String!
  owner: ID
  image: [ID]
  rate: Int!
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateAddressInput {
  where: InputID
  data: editAddressInput
}

type updateAddressPayload {
  address: Address
}

input updateBusinessmanagerInput {
  where: InputID
  data: editBusinessmanagerInput
}

type updateBusinessmanagerPayload {
  businessmanager: Businessmanager
}

input updateBusinessprofileInput {
  where: InputID
  data: editBusinessprofileInput
}

type updateBusinessprofilePayload {
  businessprofile: Businessprofile
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input updateFollowInput {
  where: InputID
  data: editFollowInput
}

type updateFollowPayload {
  follow: Follow
}

input updateGoodsInput {
  where: InputID
  data: editGoodsInput
}

type updateGoodsPayload {
  good: Goods
}

input updateOptionInput {
  where: InputID
  data: editOptionInput
}

type updateOptionPayload {
  option: Option
}

input updateQuestionInput {
  where: InputID
  data: editQuestionInput
}

type updateQuestionPayload {
  question: Question
}

input updateReviewInput {
  where: InputID
  data: editReviewInput
}

type updateReviewPayload {
  review: Review
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  goods: [ID]
  businessprofile: ID
  following_follows: [ID]
  follows: [ID]
  reviews: [ID]
  questions: [ID]
  addresses: [ID]
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  businessprofile: Businessprofile
  goods(sort: String, limit: Int, start: Int, where: JSON): [Goods]
  following_follows(sort: String, limit: Int, start: Int, where: JSON): [Follow]
  follows(sort: String, limit: Int, start: Int, where: JSON): [Follow]
  reviews(sort: String, limit: Int, start: Int, where: JSON): [Review]
  questions(sort: String, limit: Int, start: Int, where: JSON): [Question]
  addresses(sort: String, limit: Int, start: Int, where: JSON): [Address]
}
